Вопросы к устному зачёту
########################

:date: 2021-05-18 09:00
:summary: Вопросы билетов устного зачёта.
:status: draft

.. default-role:: code
.. contents:: Содержание


Процедура приёма зачёта
-----------------------

Оценка по информатике ставится в результате устного ответа на дифференцированном зачёте.
Преподаватель учебной группы имеет право в одной учебной группе поставить одному студенту "автомат".

Сдача происходит по билетам. В билете содержится два вопроса из основного списка и задача. На
подготовку студенту отводится не более 20 минут. Преподаватель слушает ответы на вопросы в билете,
а также может задать дополнительные вопросы, как из основного списка, так и любых других по
программе курса.

Использование на зачёте любых **посторонних** цифровых и бумажных носителей информации студентом
недопустимо! Допустимы только ручка, чистая бумага.

Список вопросов
---------------

#. Хеширование. Алгоритм Рабина-Карпа.
#. Открытая хеш и закрытая хеш-таблицы. Проблема удаления из закрытой хеш-таблицы. Перехеширование.
#. Словари и множества в Python.
#. Списки: односвязный, двусвязный, кольцо. Время работы основных операций (добавление в начало/конец, удаление с начала/конца, обращение к произвольному элементу).
#. Двоичное дерево поиска.
#. Куча. Сортировка кучей.
#. Определение графа. Степень вершины, петли, кратные рёбра. Цепи, пути и циклы.
#. Сильная и слабая связность графа. Компоненты связности.
#. Способы представления графа в памяти.
#. Выделение компоненты связности обходом в глубину.
#. Проверка двудольности графа.
#. Проверка графа на ацикличность или нахождение цикла обходом в глубину.
#. Алгоритм Косарайю выделения компонент сильной связности орграфа.
#. Выделение компонент связности обходом в ширину.
#. Нахождение кратчайшего цикла в невзвешенном графе.
#. Алгоритм Дейкстры (наивная реализация).
#. Алгоритм Дейкстры с кучей.
#. Алгоритм Флойда-Уоршелла.
#. Алгоритм Форда-Беллмана.
#. Остовные деревья. Алгоритм Прима (наивная реализация).
#. Остовные деревья. Алгоритм Краскала. Система непересекающихся множеств для оптимизации алгоритма. (Все без доказательств)
#. Игры на ациклических графах. Решение поиском в глубину.
#. Сумма игр. Функция Шпрага-Гранди.
#. Игры на произвольных графах.
