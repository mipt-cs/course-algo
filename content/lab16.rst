Вопросы к устному зачёту
########################

:date: 2021-12-09 09:00
:summary: Вопросы билетов устного зачёта, особенности процедуры сдачи.
:status: published

.. default-role:: code
.. contents:: Содержание



Процедура приёма зачёта
-----------------------

Оценка по информатике ставится в результате устного ответа на дифференцированном зачёте.

Сдача происходит по билетам. В билете содержится два вопроса из основного списка. На подготовку студенту отводится не более 20 минут. Преподаватель слушает ответы на вопросы в билете, а также может задать дополнительные вопросы.

Список вопросов
---------------

#. Ссылочная модель данных в Python. Изменяемые и неизменяемые типы данных. Проблема копирования.
#. Операторы присваивания в Python. Множественное присваивание и варианты обмена переменных значениями.
#. Операторы if, elif, else. Цикл while, операторы break, continue, else.
#. Цикл for, операторы break, continue, else. Функция range().
#. Проверка последовательности чисел на наличие элемента с заданными свойствами и на соответствие всех элементов заданному свойству.
#. Однопроходные алгоритмы обработки последовательности: подсчёт, сумма, произведение.
#. Поиск максимума и подсчёт количества элементов, равных максимальному.
#. Нахождение трёх максимальных элементов в последовательности за один проход.
#. Поиск местоположения максимума в последовательности за один проход.
#. Проверка простоты числа. Метод грубой силы.
#. Разложение числа на множители.
#. Решето Эратосфена. Оценка временной сложности алгоритма.
#. Алгоритм обращения чисел в массиве. Реализация циклом, без срезов.
#. Алгоритм циклического сдвига в массиве. Реализация циклом, без срезов.
#. Задача упорядочивания элементов в массиве. Оценка временной сложности задачи в общем случае. Проверка упорядоченности массива за O(N).
#. Сортировка вставками. Оценка временной сложности алгоритма.
#. Сортировка выбором. Оценка временной сложности алгоритма.
#. Сортировка методом пузырька. Оценка временной сложности алгоритма.
#. Сортировка подсчётом. Оценка временной сложности алгоритма.
#. Поразрядная сортировка. Оценка временной сложности алгоритма.
#. Быстрая сортировка Хоара. Временная сложность алгоритма (без док-ва).
#. Сортировка слиянием. Оценка временной сложности алгоритма.
#. Двоичный поиск в отсортированном массиве (левый и правый). Оценка временной сложности алгоритма. Двоичный поиск по ответу.
#. Рекурсия. Прямой и обратный ход рекурсии. Стек вызовов при рекурсии. Вычисление факториала.
#. Алгоритм Евклида. Доказательство корректности.
#. Вычисление чисел Фибоначчи.
#. Ханойские башни.
#. Рекурсивная генерация всех чисел длины M.
#. Генерация всех перестановок (рекурсивная).
#. Динамическое программирование. Решение задач ДП циклами и рекурсией. Рекурсия с мемоизацией (ленивая динамика).
#. Задача о количестве траекторий Кузнечика на числовой прямой.
#. Задача о траектории наименьшей стоимости для Кузнечика. Восстановление траектории наименьшей стоимости.
#. Вычисление расстояния Левенштейна.
#. Наибольшая общая подпоследовательность.
#. Наибольшая возрастающая подпоследовательность.
#. Проверки корректности скобочной последовательности с помощью стека.
#. Обратная Польская нотация. Вычисление выражения при помощи стека.
#. Преобразование математического выражения в обратную польскую нотацию.
#. Наивный поиск подстроки в строке. Реализация без использования стандартных методов str.
#. Z-функция строки. Наивное вычисление и его оптимизация. Z-алгоритм. Оценка временной сложности алгоритма.
#. Префикс-функция. Алгоритм Кнута-Морриса-Пратта. Оценка временной сложности алгоритма.


Оценка на зачёте
----------------

Основанием для рейтинговой оценки служат три оценки:

#. Контрольная №1
#. Контрольная №2
#. Средняя оценка за все контесты

Преподаватель, экзаменующий студента, видит все эти оценки по отдельности, а также рекомендуемую итоговую оценку, которая вычисляется по этим пяти оценкам автоматически. Если устный ответ соответствует (отличаеться не более чем на два балла) рекомендуемой оценке (показывает уровень практических навыков программирования), преподаватель её выставляет студенту. В противном случае — проверяет навыки программирования студента поставив задачу, подобную любой из контестов.


Успехов в подготовке к зачёту!
