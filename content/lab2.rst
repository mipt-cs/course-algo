Базовый синтаксис языка Python
##############################

:date: 2021-09-09 09:00
:summary: Работа в интерпретаторе Python 3.
:status: published

.. default-role:: code
.. contents:: Содержание

Введение
========

Данный курс будет посвящен изучению программирования с использованием языка **Python**. Python — это современный язык
программирования, работающий на всех распространённых операционных системах.

В настоящее время существует две версии языка Python: более старая и стремительно теряющая популярность версия 2 и
современная версия 3. Мы будем использовать версию 3 данного языка. Именно её необходимо установить дома, скачав данную
версию с сайта `www.python.org`_.

.. _www.python.org: http://www.python.org

Запустить интерпретатор python можно из командной строки:

.. code-block:: bash

   python3

Будьте внимательны: команда `python` запустит интерпретатор версии 2, с которым мы работать не будем. В системе
Windows можно использовать пункт меню «Python (command line)».

Интерактивный режим
-------------------

Откройте командную строку и напишите команду python3.

Вы увидите примерно следующее приглашение командной строки:

.. code-block:: pycon

   Python 3.1.2 (r312:79147, Jun 12 2010, 15:29:06)
   [GCC 4.4.3 20100316 (ALT Linux 4.4.3-alt2)] on linux2
   Type "help", "copyright", "credits" or "license" for more information.
   >>>

Вводите команды и наслаждайтесь результатом. А что можно вводить? Несколько примеров:

.. code-block:: pycon

   >>> 2 + 2
   4
   >>> 2 ** 100
   1267650600228229401496703205376
   >>> 'Hello' + 'World'
   'HelloWorld'
   >>> 'ABC' * 10
   'ABCABCABCABCABCABCABCABCABCABC'

Первая команда вычисляет сумму двух чисел, вторая команда вычисляет 2 в степени 100, третья команда выполняет операцию
**конкатенации** ("склеивания") для строк, а четвертая команда печатает строку `'ABC'`, повторенную 10 раз.

Хотите закончить работу с питоном? Введите команду `exit()` (именно так, со скобочками, так как это — **функция**)
или нажмите ``Ctrl+D``.

Программируемый режим
---------------------

В предыдущей главе мы использовали Python для простых разовых вычислений, используя интерактивный режим.
Теперь создадим программу и выполним её целиком.

.. code-block:: python

   a = 179
   b = 197
   c = (a ** 2 + b ** 2) ** 0.5
   print (c)

Здесь мы используем  **переменные** — объекты, в которых можно сохранять различные (числовые, строковые и прочие)
значения. В первой строке переменной `a` присваивается значение `179`, затем переменной `b` присваивается значение
`971`, затем переменной `c` присваивается значение арифметического выражения, равного длине гипотенузы. После этого
значение переменной `c` выводится на экран.

Упражнение №1: первая программа
-------------------------------

Откройте произвольный текстовый редактор, например, `gedit`. Скопируйте туда текст программы, написанной выше.
Сохраните текст в файле с именем `hypot.py`.

Запустите *терминал*, перейдите в каталог, где лежит файл `hypot.py` и выполните эту программу:

.. code-block:: bash

   python3 hypot.py

Интерпретатор языка Python вместо интерактивного режима выполнит последовательность команд из файла.


При этом значения вычисленных выражений не выводятся на экран (в
отличие от интерактивного режима), поэтому для того, чтобы вывести результат работы программы, то есть значение
переменной `c`, нужна функция `print()`.

Базовый синтаксис языка Python 3
================================


Типы данных
-----------

Итак, мы видим, что Python умеет работать как минимум с двумя видами данных — числами и строками. Числа записываются
последовательностью цифр, также перед числом может стоять знак минус, а строки записываются в одинарных кавычках. `2`
и `'2'` — это разные объекты, первый объект — число, а второй — строка. Операция ``+`` для целых чисел и для строк
работает по-разному: для чисел это сложение, а для строк — конкатенация.

Кроме целых чисел есть и другой класс чисел: действительные (вещественные числа), представляемые в виде десятичных
дробей. Они записываются с использованием десятичной точки, например, `2.0`.

Определить тип объекта можно при помощи функции `type`:

.. code-block:: pycon

   >>> type(2)
   <class 'int'>
   >>> type('2')
   <class 'str'>
   >>> type(2.0)
   <class 'float'>

Обратите внимание: `type` является функцией, аргументы функции указываются в скобках после ее имени.

Операции с числами
------------------

Вот список основных операций для чисел:

- `A+B` — сумма;
- `A-B` — разность;
- `A*B` — произведение;
- `A/B` — частное;
- `A**B` — возведение в степень.

Полезно помнить, что квадратный корень из числа ``x`` — это `x**0.5`, а корень степени ``n`` — это `x**(1/n)`.

Есть также унарный вариант операции ``-``, то есть это операция с одним аргументом. Она возвращает число, противоположное
данному. Например: `-A`.

В выражении может встречаться много операций подряд. Как в этом случае определяется порядок действий? Например, чему
будет равно `1+2*3**1+1`? В данном случае ответ будет 8, так как сначала выполняется возведение в степень, затем —
умножение, затем —  сложение.

Более общие правила определения приоритетов операций такие:

#. Выполняются возведения в степень  **справа налево**, то есть `3**3**3` это 3²⁷.
#. Выполняются унарные минусы (отрицания).
#. Выполняются умножения и деления слева направо. Операции умножения и деления имеют одинаковый приоритет.
#. Выполняются сложения и вычитания слева направо. Операции сложения и вычитания имеют одинаковый приоритет.

Операции над строками
---------------------

- `A+B` — конкатенация;
- `A*n` — повторение ``n`` раз, значение ``n`` должно быть целого типа.




Ветвление
---------

Ветвление (или условная инструкция) в Python имеет следующий синтаксис:

.. code-block:: python

   if Условие:
       Блок_инструкций_1
   else:
       Блок_инструкций_2

`Блок_инструкций_1` будет выполнен, если `Условие` истинно.  Если `Условие` ложно, будет выполнен `Блок_инструкций_2`.

В условной инструкции может отсутствовать слово `else` и последующий блок. Такая инструкция называется неполным
ветвлением.  Например, если дано число `x` и мы хотим заменить его на абсолютную величину `x`, то это можно сделать
следующим образом:

.. code-block:: python

   if x < 0:
       x = -x
   print(x)

В этом примере переменной `x` будет присвоено значение `-x`, но только в том случае, когда `x<0`. А вот инструкция
`print(x)` будет выполнена всегда, независимо от проверяемого условия.

Для выделения блока инструкций, относящихся к инструкции `if` или `else`, в  языке Python используются отступы. Все
инструкции, которые относятся к одному блоку, должны иметь равную величину отступа, то есть одинаковое число пробелов в
начале строки. Рекомендуется использовать *отступ в 4 пробела*.


Вложенные условные инструкции
-----------------------------

Внутри условных инструкций можно использовать любые инструкции языка Python, в том числе и условную инструкцию. Вложенное ветвление — после одной развилки в ходе исполнения программы появляется другая развилка. При этом вложенные блоки имеют больший размер отступа (например, 8 пробелов).

Примере программы, которая по данным ненулевым
числам x и y определяет, в какой из четвертей координатной плоскости находится точка (x,y):

.. code-block:: python

   x = int(input())
   y = int(input())
   if x > 0:
       if y > 0:               # x>0, y>0
           print("Первая четверть")
       else:                   # x>0, y<0
           print("Четвертая четверть")
   else:
       if y > 0:               # x<0, y>0
           print("Вторая четверть")
       else:                   # x<0, y<0
           print("Третья четверть")

В этом примере мы использовали *комментарии* – текст, который интерпретатор игнорирует.  Комментариями в Pythonе
является символ `#` и весь текст после этого символа до конца строки.
Желательно писать код так, чтобы комментарии были излишними, однако допускается писать их там, где возникают "призраки"
(утверждения или теоремы, которые использованы при написании кода, но не следуют из самого кода).
Однако код выше является **плохим примером документации**: комментарии врут, поскольку автором не учтены точки на осях.


Операторы сравнения
-------------------

Как правило, в качестве проверяемого условия используется результат вычисления одного из следующих операторов сравнения:

+----------+---------------------------------------------------------------------------------+
| Оператор | Значение                                                                        |
+==========+=================================================================================+
| `<`      | Меньше — условие верно, если первый операнд меньше второго.                     |
+----------+---------------------------------------------------------------------------------+
| `>`      | Больше — условие верно, если первый операнд больше второго.                     |
+----------+---------------------------------------------------------------------------------+
| `<=`     | Меньше или равно — условие верно, если первый операнд меньше или равен второму. |
+----------+---------------------------------------------------------------------------------+
| `>=`     | Больше или равно — условие верно, если первый операнд больше или равен второму. |
+----------+---------------------------------------------------------------------------------+
| `==`     | Равенство. Условие верно, если два операнда равны.                              |
+----------+---------------------------------------------------------------------------------+

Например, условие `(x * x < 1000)` означает «значение `x * x` меньше 1000», а условие `(2 * x != y)` означает «удвоенное
значение переменной `x` не равно значению переменной `y`».


Операторы сравнения в можно объединять в цепочки, например, `a == b == c` или `1 <= x <= 10`.

Тип данных bool
---------------

Операторы сравнения возвращают значения специального логического типа `bool`. Значения логического типа могут принимать
одно из двух значений: `True` (истина) или `False` (ложь). Если преобразовать логическое `True` к типу `int`, то
получится 1, а преобразование `False` даст 0. При обратном преобразовании число 0 преобразуется в `False`, а любое
ненулевое число в `True`. При преобразовании `str` в `bool` пустая строка преобразовывается в `False`, а любая непустая
строка в `True`.


Каскадные условные инструкции
-----------------------------


Пример программы, определяющий четверть координатной плоскости, можно переписать, используя «каскадную»
последовательность инструкцией `if... elif... else`:

.. code-block:: python

   x = int(input())
   y = int(input())
   if x > 0 and y > 0:
       print("Первая четверть")
   elif x < 0 and y > 0:
       print("Вторая четверть")
   elif x < 0 and y < 0:
       print("Третья четверть")
   elif x > 0 and y < 0:
       print("Четвертая четверть")
   else:
       print("Точка находится на осях или в центре координат.")

В такой конструкции условия `if`, ..., `elif` проверяются по очереди, выполняется блок, соответствующий первому из
истинных условий. Если все проверяемые условия ложны, то выполняется блок `else`, если он присутствует.
Обратите внимание, что таким образом мы чётче видим условия наступления случаев (нет "призраков"), а также
отлавливаем ситуацию, когда точка не находится ни в одной из четвертей.

Цикл while
----------

Цикл `while` («пока») позволяет выполнить одну и ту же последовательность действий, пока проверяемое условие истинно.
Условие записывается до тела цикла и проверяется до выполнения тела цикла. Как правило, цикл `while` используется, когда
невозможно определить точное значение количества проходов исполнения цикла.

Синтаксис цикла `while` в простейшем случае выглядит так:

.. code-block:: python

   while Условие:
       Блок_инструкций

При выполнении цикла `while` сначала проверяется условие. Если оно ложно, то  выполнение цикла прекращается и управление
передается на следующую инструкцию после тела цикла `while`. Если условие истинно, то выполняется инструкция, после чего
условие проверяется снова и снова выполняется инструкция. Так продолжается до тех пор, пока условие будет истинно. Как
только условие станет ложно, работа цикла завершится и управление передастся следующей инструкции после цикла.

Например, следующий фрагмент программы напечатает на экран всех целые числа, не превосходящие n:

.. code-block:: python

   a = 1
   while a <= n:
       print(a)
       a += 1

Общая схема цикла `while` в данном случае для перебора всех подходящих значений такая:

.. code-block:: python

   a = начальное_значение
   while а_является_подходящим_числом:
       обработать_a
       перейти_к_следующему_a

Выведем все степени двойки, не превосходящие числа n:

.. code-block:: python

   a = 1
   while a <= n:
       print(a)
       a *= 2

Цикл for
--------

Цикл `for` может быть использован как более краткая альтернатива циклу `while`.

Для последовательного перебора целых чисел из диапазона `[0; n)` можно использовать цикл `for`:

.. code-block:: python

   for i in range(10):
      print(i)

Этот код по выполняемым действиям полностью соответствуют циклу `while`:

.. code-block:: python

   i = 0
   while i < 10:
     print(i)
     i += 1

Можно задавать начальные и конечные значения для переменной цикла, а также шаг:

.. code-block:: python

   for i in range(20, 10, -2):
     print(i)

Аналогичный цикл `while`

.. code-block:: python

   i = 20
   while i > 10:
     print(i)
     i -= 2


Контест №1
==========

Программированию учатся на практике, поэтому в курсе каждую неделю будет *контест*.
Контест - это набор задач с системой автоматической проверки решения на тестовых наборах данных.
Для участия необходима регистрация_ на контест.

.. _регистрация: http://judge2.vdi.mipt.ru/cgi-bin/new-register?contest_id=940102

В первый раз вам придётся создать пользователя (*логин и пароль обязательно запишите!*), а также ввести некоторую регистрационную информацию: фамилию, имя, номер учебной группы. Пожалуйста, вводите **реальные данные**, иначе преподаватель не сможет учитывать ваши решения.

Попробуйте сдать решение первой задачи:

.. code-block:: python

   x, y = input().split()
   x = int(x)
   y = int(y)
   print(x + y)

